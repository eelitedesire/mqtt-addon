<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
        <title>Carbonoz SolarAutopilot</title>
	    <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="css/bootstrap.min.css">
	    <!----css3---->
        <link rel="stylesheet" href="css/custom.css">
		
		
		<!--google fonts -->
	    <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
	
	
	   <!--google material icon-->
      <link href="https://fonts.googleapis.com/css2?family=Material+Icons"rel="stylesheet">
      <style>
        
      .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        grid-gap: 40px;
        justify-content: center;
        align-items: center;
      }

      .card {
        position: relative;
        width: 220px;
        height: 250px;
        background-color: #2a2a2a;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .card-content {
        position: relative;
        width: 150px;
        height: 150px;
      }

    

      .card-content svg circle {
        width: 100%;
        height: 100%;
        fill: transparent;
        stroke-width: 2;
        stroke: #191919;
        transform: translate(5px, 5px);
    

      }

      .card-content svg circle:nth-child(2) {
        stroke: var(--clr);
        stroke-dasharray: 440;
        stroke-dashoffset: calc(440 - (440 * var(--num)) / 100);
        opacity: 0;
        animation: fadeIn 1s linear forwards;
        animation-delay: 2.5s;
      }

      @keyframes fadeIn{
        0%{
          opacity: 0;
        }
        100%{
          opacity: 1;
        }
      }

       .circle-progress {
        position: absolute;
    inset: 5px;
    z-index: 10;
      } 

      @keyframes animateDot {
        0%{
          transform: rotate(0deg);
        }
        100%{
          transform: rotate(calc(3.6deg * var(--num)));
        }
      }

      .circle-progress::before {
        content: '';
        position: absolute;
        top: -5px;
        left: 50%;
        transform: translateX(-50%);
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: var(--clr);
        box-shadow: 0 0 10px var(--clr),
                    0 0 30px var(--clr);
      }

      .number {
        position: absolute;
        top: 50%;
        left: 58%;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        opacity: 0;
        animation: fadeIn 1s linear forwards;
        animation-delay: 2.5s;
      }

      .number .value {
        display: flex;
        justify-content: center;
        align-items: center;
        color: #fff;
        font-weight: 700;
        font-size: 1rem;
      }

      .icon {
        position: absolute;
        top: 85%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-weight: 300;
        font-size: 0.75em;
        letter-spacing: 2px;
        text-transform: uppercase;
        color: rgba(255,255,255,0.75);
      }
     
    </style>
      

  </head>
  <body>
  


<div class="wrapper">
     
	  <div class="body-overlay"></div>
	 
	 <!-------sidebar--design------------>
	 
	 <div id="sidebar">
	    <div class="sidebar-header">
		   <h3><img src="img/logo.png" class="img-fluid"/><span>Carbonoz </span></h3>
		</div>
		<ul class="list-unstyled component m-0">
		  <li class="active">
		  <a href="/status" class="dashboard"><i class="material-icons">dashboard</i>dashboard </a>
		  </li>

		  <li>
			<a href="/charts" class="charts"><i class="material-icons">insert_chart</i>Charts</a>
		</li>

		<li>
			<a href="/analytics" class="total-icon"><i class="material-icons">functions</i>Totals</a>
		</li>
		
		
		<li>
			<a href="/messages" class="message-icon"><i class="material-icons">message</i>Message</a>
		</li>
		
    <li>
      <a href="/automation" class="automation-icon"><i class="material-icons">build</i>Automation</a>
  </li>
  <li>
    <a href="/configuration" class="config-icon"><i class="material-icons">settings</i>Configuration</a>
</li>
		
		 
		  
	 </div>
	 
   <!-------sidebar--design- close----------->
   
   
   
      <!-------page-content start----------->
   
      <div id="content">
	     
		  <!------top-navbar-start-----------> 
		     
		  <div class="top-navbar">
		     <div class="xd-topbar">
			     <div class="row">
				     <div class="col-2 col-md-1 col-lg-1 order-2 order-md-1 align-self-center">
					    <div class="xp-menubar">
						    <span class="material-icons text-white">signal_cellular_alt</span>
						</div>
					 </div>
					 
					 <div class="col-md-5 col-lg-3 order-3 order-md-2">
				
					 </div>
					 
					 
					 <div class="col-10 col-md-6 col-lg-8 order-1 order-md-3">
					     <div class="xp-profilebar text-right">
						    <nav class="navbar p-0">
			
							</nav>
						 </div>
					 </div>
					 
				 </div>
				 
				 <div class="xp-breadcrumbbar text-center">
				    <h4 class="page-title">Dashboard</h4>
					<ol class="breadcrumb">
					  <li class="breadcrumb-item"><a href="#">Carbonoz</a></li>
					  <li class="breadcrumb-item active" aria-curent="page">SolarAutopilot</li>
					</ol>
				 </div>
				 
				 
			 </div>
		  </div>
		  <!------top-navbar-end-----------> 
		  
		  
		   <!------main-content-start-----------> 
		     
		      <div class="main-content">
			     <div class="row">
				    <div class="col-md-12">
					   <div class="table-wrapper">
					     
					   <div class="table-title">
					     <div class="row">
						     <div class="col-sm-6 p-0 flex justify-content-lg-start justify-content-center">
							    <h2 class="ml-lg-2">Energy Dashboard</h2>
							 </div>
							 <div class="col-sm-6 p-0 flex justify-content-lg-end justify-content-center">
							   
							 </div>
					     </div>
					   </div>
					   

<br>
					   
<!-- dashboard -->


<main>
    <div class="grid-container">
      <!-- Solar Production Card -->
      <div class="card">
        <div class="card-content" style="--clr:#06ccff;--num:78">
          <div class="circle-progress solar-production">
            <svg>
              <circle class="background" cx="70" cy="70" r="70"></circle>
              <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-solar-panel icon" style="color: #06ccff;">Solar</i>
            <div class="number">
              <div class="value">0.0 W </div>
            </div>
          </div>
          <home-assistant-energy-usage-card
            period="daily"
            detail-period="monthly"
            data="<%= JSON.stringify(data.solarProductionData) %>">
          </home-assistant-energy-usage-card>
        </div>
      </div>
      <!-- Battery State of Charge Card -->
      <div class="card">
        <div class="card-content" style="--clr:#ff00be;--num:78">
          <div class="circle-progress battery-state-of-charge">
            <svg>
              <circle class="background" cx="70" cy="70" r="70"></circle>
              <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-battery-full icon" style="color: #ff00be;">Battery</i>
            <div class="number">
              <div class="value">0.0 %</div>
            </div>
          </div>
          <home-assistant-battery-storage-card
            data="<%= JSON.stringify(data.batteryStateOfChargeData) %>">
          </home-assistant-battery-storage-card>
        </div>
      </div>
      <!-- Grid Import Card -->
      <div class="card">
        <div class="card-content" style="--clr:#fee800;;--num:78">
          <div class="circle-progress grid-import">
            <svg>
              <circle class="background" cx="70" cy="70" r="70"></circle>
              <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-bolt icon" style="color: #fee800;;">Grid
          </i>
            <div class="number">
              <div class="value">0.0 W</div>
            </div>
          </div>
          <home-assistant-energy-usage-card
            period="daily"
            detail-period="monthly"
            data="<%= JSON.stringify(data.gridPowerData) %>">
          </home-assistant-energy-usage-card>
        </div>
      </div>
      <!-- Load Power Card -->
      <div class="card">
        <div class="card-content" style="--clr: #00ffae;--num:78">
          <div class="circle-progress load-power">
            <svg>
              <circle class="background" cx="70" cy="70" r="70"></circle>
              <circle class="progress" cx="70" cy="70" r="70"></circle>
            </svg>
            <i class="fas fa-bolt icon" style="color: #00ffae;">Load</i>
            <div class="number">
              <div class="value">0.0 W</div>
            </div>
          </div>
          <home-assistant-energy-usage-card
            period="daily"
            detail-period="monthly"
            data="<%= JSON.stringify(data.loadPowerData) %>">
          </home-assistant-energy-usage-card>
        </div>
      </div>

      <!-- Grid Voltage Card -->
<div class="card">
  <div class="card-content" style="--clr:#ffa500;--num:78">
    <div class="circle-progress grid-voltage">
      <svg>
        <circle class="background" cx="70" cy="70" r="70"></circle>
        <circle class="progress" cx="70" cy="70" r="70"></circle>
      </svg>
      <i class="fas fa-bolt icon" style="color: #ffa500;">Grid V</i>
      <div class="number">
        <div class="value">0.0 V</div>
      </div>
    </div>
  </div>
</div>

 
      
  </main>
					
					
									
	
<!-- Charts -->
<div class="chart-container">
    <canvas id="energyChart"></canvas>
</div>
<div class="chart-container">
    <canvas id="batteryChart"></canvas>
</div>
					  
					
					
				 
			     </div>
			  </div>
		  
		    <!------main-content-end-----------> 
		  
		 
		 
		 <!----footer-design------------->
		 
		 <footer class="footer">
		    <div class="container-fluid">
			   <div class="footer-in">
				<p class="mb-0">&copy 2024 Carbonoz . All Rights Reserved.</p>
			   </div>
			</div>
		 </footer>
		 
		 
		 
		 
	  </div>
   
</div>



<!-------complete html----------->





  
     <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
   <script src="js/jquery-3.3.1.slim.min.js"></script>
   <script src="js/popper.min.js"></script>
   <script src="js/bootstrap.min.js"></script>
   <script src="js/jquery-3.3.1.min.js"></script>

   <script src="js/jquery-3.3.1.slim.min.js"></script>
   <script src="js/popper.min.js"></script>
   <script src="js/bootstrap.min.js"></script>
   <script src="js/jquery-3.3.1.min.js"></script>
   <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
   <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.min.js"></script>
  
<script>
    $(document).ready(function () {
        $(".xp-menubar").on('click', function () {
            $("#sidebar").toggleClass('active');
            $("#content").toggleClass('active');
        });

        $('.xp-menubar,.body-overlay').on('click', function () {
            $("#sidebar,.body-overlay").toggleClass('show-nav');
        });
    });

    function updateRealTimeData() {
        fetch('/api/realtime-data')
            .then(response => response.json())
            .then(data => {
                console.log('Fetched Data:', data);

                updateCircleProgress('.solar-production', data.solarProduction, '#06ccff');
                updateCircleProgress('.battery-state-of-charge', data.batteryStateOfCharge, '#ff00be');
                updateCircleProgress('.grid-import', data.gridImport, '#fee800');
                updateCircleProgress('.load-power', data.loadPower, '#00ffae');
                updateCircleProgress('.grid-voltage', data.gridVoltage, '#ffa500');

                // Update charts with fetched data
                updateChartsWithData(data);
            })
            .catch(error => {
                console.error('Error fetching real-time data:', error);
            });
    }

    function updateCircleProgress(selector, data, color) {
        const progressElement = document.querySelector(`${selector} .progress`);
        const valueElement = document.querySelector(`${selector} .value`);
        const iconElement = document.querySelector(`${selector} .icon`);

        const maxValue = selector === '.grid-voltage' ? 500 : 1000; // Maximum value for grid voltage and other metrics
        const progress = (data.value / maxValue) * 100;

        progressElement.style.strokeDashoffset = 565.48 - (565.48 * progress / 100);
        progressElement.style.stroke = color;
        iconElement.style.color = color;
        valueElement.textContent = `${data.value.toFixed(2)} ${selector === '.grid-voltage' ? 'V' : 'W'}`;
    }

    const energyChartContext = document.getElementById('energyChart').getContext('2d');
      const batteryChartContext = document.getElementById('batteryChart').getContext('2d');

      const energyChart = new Chart(energyChartContext, {
        type: 'line',
        data: {
          labels: [],
          datasets: [
            {
              label: 'Load Power',
              borderColor: '#00ffae',
              data: [],
              fill: false,
            },
            {
              label: 'Grid Power',
              borderColor: '#fee800',
              data: [],
              fill: false,
            },
            {
              label: 'Solar PV',
              borderColor: '#06ccff',
              data: [],
              fill: false,
            },
          ],
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: 'Load Power, Grid Power, and Solar PV',
            },
            annotation: {
              annotations: [
                {
                  type: 'line',
                  mode: 'horizontal',
                  scaleID: 'y',
                  value: 500, // The value for the horizontal line
                  borderColor: 'rgba(0, 0, 0, 0.5)', // Line color
                  borderWidth: 2, // Line width
                  label: {
                    content: 'Target Value', // Label text
                    enabled: true, // Show label
                    position: 'start', // Label position
                  },
                },
              ],
            },
          },
          scales: {
            x: {
              display: true,
              title: {
                display: true,
                text: 'Time'
              }
            },
            y: {
              display: true,
              title: {
                display: true,
                text: 'Power (W)'
              },
              suggestedMax: 1000, // Set the maximum value for the y-axis
            }
          }
        }
      });

      const batteryChart = new Chart(batteryChartContext, {
  type: 'line',
  data: {
    labels: [],
    datasets: [
      {
        label: 'Battery',
        data: [],
        fill: false,
        backgroundColor: (context) => {
          const value = context.dataset.data[context.dataIndex];
          return getColorForValue(value);
        },
        borderColor: (context) => {
          const value = context.dataset.data[context.dataIndex];
          return getColorForValue(value);
        },
      },
    ],
  },
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Battery State of Charge',
      },
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Time'
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Charge (%)'
        },
        suggestedMax: 100,
      }
    }
  }
});

function getColorForValue(value) {
  if (value < 20) {
    return '#ff0000'; // Red for values below 20%
  } else if (value < 40) {
    return '#ffa500'; // Orange for values between 20% and 40%
  } else {
    return '#00ff00'; // Green for values above 40%
  }
}

function updateChartsWithData(data) {
  const currentTimestamp = new Date().toLocaleString();

  // Update battery chart
  batteryChart.data.labels.push(currentTimestamp);
  batteryChart.data.datasets[0].data.push(data.batteryStateOfCharge);
  batteryChart.update();
}

      function updateChartsWithData(data) {
        const currentTimestamp = new Date().toLocaleString();

        // Update energy chart
        energyChart.data.labels.push(currentTimestamp);
        energyChart.data.datasets[0].data.push(data.loadPower);
        energyChart.data.datasets[1].data.push(data.gridPower);
        energyChart.data.datasets[2].data.push(data.solarProductionData);
        energyChart.update();

        // Update battery chart
        batteryChart.data.labels.push(currentTimestamp);
        batteryChart.data.datasets[0].data.push(data.batteryStateOfCharge);
        batteryChart.update();
      }

      // Update real-time data every 5 seconds
      setInterval(updateRealTimeData, 5000);
    </script>
  </body>
  
  </html>
